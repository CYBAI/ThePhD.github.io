[Name]
JeanHeyd "ThePhD"

[Organization]
Columbia Engineering at Columbia University in New York

[Bio]
JeanHeyd "ThePhD" is a student at Columbia University in New York. Most of his programming is for fun and as a hobby, even if his largest open-source contribution -- sol2 -- is used across many industries. He is currently working towards earning his own nickname, climbing the academic ladder while spending as much time as possible contributing to C++ standardization and development.

He very much loves dogs and hopes to have his own in a year or so. He also likes Vulf's "Tee Time" from the album Mr. Finish Line.


[Title]
Compile Fast, Run Faster, Scale Forever: A Look into the sol2 Lua Library


[Session Length]
90 Minutes


[Type]
Demonstration and Discussion


[Tags]
scripting,Lua,API design,cross platform,games,performance,C wrapper,C++14,C++17,API compatibility,single header,header only


[Audience]
Designed for application developers, script programmers, game developers, dynamic language API writers, C API maintainers, API designers


[Session Material]
I grant permission for my session to be recorded for public distribution.
Slides, Library Source Code, Blog Post

[Session Description]
Using another language inside your C++ program never comes easily, even if its a scripting language. Specifically, the Lua language's C API is very explicit and fast but stack management and API quirks often make scaling up a problem without significant man-hours, and often result in suboptimal wrappers written to serve the current needs and deadlines without thought to clean interface or later optimization.

sol2 is a new approach to wrapping the Lua C API. We consider first how to create a pleasant experience similar to the Lua language itself, creating airtight abstractions around core concepts to maximize initial intuitive understanding of our wrapper. We then introduce library-specific concepts with tutorials and documentation to allow the user to make progress quickly. Finally, we provide several facilities for overriding the default wrapper behavior to allow for custom handling, to allow the user to scale the wrapper with their needs.

In this session, we will discuss API extension points, C API wrapping techniques, Lua C API (ab)use, runtime performance characteristics, and compile-time reduction strategies. Friendly discussion throughout the demo and presentation are encouraged!


[Outline]

Compile Fast, Run Faster, Scale Forever: A Look into the sol2 Lua Library
=========================================================================

Lua?
----
- What is it (scripting language)
- Who uses it (everybody - associated with games, servers, operating system components, GUI skinning (Waze), Redis)
- Why is it used?
- - Tiny, embeddable, runnable from C, compilable with ANSI C
- - MIT Licensed, commercially friendly
- Why is it great (works everywhere, very good C API even in its earlier versions)

Lua Problems
------------
- C API is good for simple things, 
- Multiple different ways to do the same thing (with different performance implications)
- One optimal, right way to do things (but sometimes hard to know wha ttha tis)
- Breaking API changes between versions ("rapid" deprecation, hard removal, function signature changes)
- Hard-line LuaJIT (Stuck at Lua 5.1 -- over a decade old in terms of API)

sol2?
-----
- What is sol2 and why do we want to use it
- - Lua C API is explicit: managing stack gets tedious
- - Doing high-level operations are harder
- - Lazy use means heavy performance loss


"But People Have Wrapped Lua Before"
------------------------------------
- Some good wrappers, some bad wrappers, some middle-of-the-road
- With varying levels of performance (Selene most popular, WORST performance, aaaahhh!)
- Others are REALLY great in some categories (OOLua/luacppinterface with function calls)
- Others fail REALLY hard in some categories (Selene with table abstraction, etc.)

sol2 - The Beginning
--------------------
- Let's do a Binding to C++, the right way
- A History (Oncologist with C++ affinity helping out a Professor - Danny "Rapptz" Y., "Sol v1.0" | Lua Enthusiast and graphics/game developer Bartek, "Lundi")
- 

Abstracting proper (Demo)
-------------------------
- What are the primitives? (Table, Function, Userdata)
- What is the lua way to support these primitives? (reference, stack_reference)
- What is the glue between these primitives and their functionality? (stack::(probe_)get_field, stack::set_field, stack::push, stack::get, stack::check, stack::check_get)

Making it Fast
--------------
- ... By being lazy (lazy evaluation of operator[] = LOOOADS-A-SPEEEED)
- By encoding information into types and operations (global table -> sol::global_table -> trigger optmizations all the way in "stack")
- Like all good systems, BATCHING (Get a table once, pull EVERYTHING YOU CAN FROM THE TABLE, then pop it off the stack)
- No different from Mike Acton's style of C - we just put the information in types rather than forcing the user to type it out in copy-paste style of programming

Interop (Demo)
--------------
- sol2 can "understand" external representations, making it possible to work with other types
- override getters, setters, checkers for your own types
- container traits (in the face of not having ranges or other useful type traits)

Compile-Time Reduction
----------------------
- 30-40 minute test builds are NOT fun...
- How do we improve this?
- Shaving off tuples
- Avoiding Variadics
- Runtime erasure for storage / containment
- - Without additional speed penalty!!

Questions?
---------------
- Take questions from audience
- Show examples to answer questions, docs too if applicable
- Shill/sell-out moment
- Thank sponsors



[History]
From https://github.com/ThePhD/sol2:
"A Sun For the Moon - A Zero-Overhead Lua Abstraction using C++"
ThePhD
Lua Workshop 2016 - Mashape, San Francisco, CA
Deck - https://github.com/ThePhD/sol2/blob/develop/docs/presentations/2016.10.14%20-%20ThePhD%20-%20No%20Overhead%20C%20Abstraction.pdf

"Wrapping Lua C in C++ - Efficiently, Nicely, and with a Touch of Magic"
ThePhD
Boston C++ Meetup November 2017 - CiC (Milk Street), Boston, MA
Deck - https://github.com/ThePhD/sol2/blob/develop/docs/presentations/2017.11.08%20-%20ThePhD%20-%20Wrapping%20Lua%20C%20in%20C%2B%2B.pdf


[Video]
https://www.youtube.com/watch?v=NAox5UsjbUM

[Comments]
The video presentation is one of my first public conference presentations: I have improved vastly since then and have given 2 more presentations at a C++ User Group, plus several more online (including one at the now-named SG16 Unicode). There is much I still need to learn as a volunteer, however, and I would like to try my hand in a more professional setting.